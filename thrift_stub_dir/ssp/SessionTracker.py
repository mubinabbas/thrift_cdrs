#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def next_i_call(self):
    pass

  def current_i_call(self):
    pass

  def next_i_cdrs_connection(self):
    pass

  def b2bua_stopped(self, b2bua_id, rtime):
    """
    Parameters:
     - b2bua_id
     - rtime
    """
    pass

  def register_b2bua(self, b2bua_id, uri, pid):
    """
    Parameters:
     - b2bua_id
     - uri
     - pid
    """
    pass

  def call_error(self, parent_i_call, i_account, cli, cld, cost, call_id, setup_ts, remote_ip, cli_orig, cld_orig, user_agent, result, lrn_cld_in, lrn_cld, p_asserted_id, i_call_type, buying_dcg, remote_party_id):
    """
    Parameters:
     - parent_i_call
     - i_account
     - cli
     - cld
     - cost
     - call_id
     - setup_ts
     - remote_ip
     - cli_orig
     - cld_orig
     - user_agent
     - result
     - lrn_cld_in
     - lrn_cld
     - p_asserted_id
     - i_call_type
     - buying_dcg
     - remote_party_id
    """
    pass

  def register_call(self, parent_i_call, i_account, disallow_loops, acc_max_sessions, call_id, cld, cli, setup_ts, i_billing_plan, billing_plan_suspended, account_billables, accessibility_billables, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, max_calls_per_second, translation_cost, did_charging_group, is_late_dcg, average_duration, max_credit_time, sess_id, round_up, p_asserted_id, i_call_type, remote_party_id):
    """
    Parameters:
     - parent_i_call
     - i_account
     - disallow_loops
     - acc_max_sessions
     - call_id
     - cld
     - cli
     - setup_ts
     - i_billing_plan
     - billing_plan_suspended
     - account_billables
     - accessibility_billables
     - remote_ip
     - cli_orig
     - cld_orig
     - i_protocol
     - user_agent
     - max_calls_per_second
     - translation_cost
     - did_charging_group
     - is_late_dcg
     - average_duration
     - max_credit_time
     - sess_id
     - round_up
     - p_asserted_id
     - i_call_type
     - remote_party_id
    """
    pass

  def register_virtual(self, bind_session_id, i_call, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, i_account, i_billing_plan, billing_plan_suspended, cld, account_billables, accessibility_billables, rtime, translation_cost, max_credit_time, sess_id, round_up, p_asserted_id, remote_party_id):
    """
    Parameters:
     - bind_session_id
     - i_call
     - remote_ip
     - cli_orig
     - cld_orig
     - i_protocol
     - user_agent
     - i_account
     - i_billing_plan
     - billing_plan_suspended
     - cld
     - account_billables
     - accessibility_billables
     - rtime
     - translation_cost
     - max_credit_time
     - sess_id
     - round_up
     - p_asserted_id
     - remote_party_id
    """
    pass

  def stats_all(self):
    pass

  def stats_total(self):
    pass

  def sess_started(self, sess_id, rtime, crtime_ext, p1xx_ts):
    """
    Parameters:
     - sess_id
     - rtime
     - crtime_ext
     - p1xx_ts
    """
    pass

  def write_cdr(self, i_account, duration, delay, pdd1xx, connected, account_billables, accessibility_billables, customer_billables, rtime, origin, result, i_billing_plan, i_call, remote_ip, cld, cli_orig, cld_orig, setup_ts, user_agent, i_protocol, translation_cost, dcg, is_late_dcg, billing_plan_suspended, lrn_cld_in, lrn_cld, round_up, p_asserted_id, buying_dcg, remote_party_id, sdp_list, customer_dcgs):
    """
    Parameters:
     - i_account
     - duration
     - delay
     - pdd1xx
     - connected
     - account_billables
     - accessibility_billables
     - customer_billables
     - rtime
     - origin
     - result
     - i_billing_plan
     - i_call
     - remote_ip
     - cld
     - cli_orig
     - cld_orig
     - setup_ts
     - user_agent
     - i_protocol
     - translation_cost
     - dcg
     - is_late_dcg
     - billing_plan_suspended
     - lrn_cld_in
     - lrn_cld
     - round_up
     - p_asserted_id
     - buying_dcg
     - remote_party_id
     - sdp_list
     - customer_dcgs
    """
    pass

  def sess_ended(self, b2bua_id, sess_id, customer_billables, duration, delay, pdd1xx, connected, rtime, origin, result, lrn_cld_in, lrn_cld, buying_dcg, sdp_list, customer_dcgs):
    """
    Parameters:
     - b2bua_id
     - sess_id
     - customer_billables
     - duration
     - delay
     - pdd1xx
     - connected
     - rtime
     - origin
     - result
     - lrn_cld_in
     - lrn_cld
     - buying_dcg
     - sdp_list
     - customer_dcgs
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def next_i_call(self):
    self.send_next_i_call()
    return self.recv_next_i_call()

  def send_next_i_call(self):
    self._oprot.writeMessageBegin('next_i_call', TMessageType.CALL, self._seqid)
    args = next_i_call_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_next_i_call(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = next_i_call_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "next_i_call failed: unknown result");

  def current_i_call(self):
    self.send_current_i_call()
    return self.recv_current_i_call()

  def send_current_i_call(self):
    self._oprot.writeMessageBegin('current_i_call', TMessageType.CALL, self._seqid)
    args = current_i_call_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_current_i_call(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = current_i_call_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "current_i_call failed: unknown result");

  def next_i_cdrs_connection(self):
    self.send_next_i_cdrs_connection()
    return self.recv_next_i_cdrs_connection()

  def send_next_i_cdrs_connection(self):
    self._oprot.writeMessageBegin('next_i_cdrs_connection', TMessageType.CALL, self._seqid)
    args = next_i_cdrs_connection_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_next_i_cdrs_connection(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = next_i_cdrs_connection_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "next_i_cdrs_connection failed: unknown result");

  def b2bua_stopped(self, b2bua_id, rtime):
    """
    Parameters:
     - b2bua_id
     - rtime
    """
    self.send_b2bua_stopped(b2bua_id, rtime)

  def send_b2bua_stopped(self, b2bua_id, rtime):
    self._oprot.writeMessageBegin('b2bua_stopped', TMessageType.CALL, self._seqid)
    args = b2bua_stopped_args()
    args.b2bua_id = b2bua_id
    args.rtime = rtime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def register_b2bua(self, b2bua_id, uri, pid):
    """
    Parameters:
     - b2bua_id
     - uri
     - pid
    """
    self.send_register_b2bua(b2bua_id, uri, pid)
    self.recv_register_b2bua()

  def send_register_b2bua(self, b2bua_id, uri, pid):
    self._oprot.writeMessageBegin('register_b2bua', TMessageType.CALL, self._seqid)
    args = register_b2bua_args()
    args.b2bua_id = b2bua_id
    args.uri = uri
    args.pid = pid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_register_b2bua(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = register_b2bua_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def call_error(self, parent_i_call, i_account, cli, cld, cost, call_id, setup_ts, remote_ip, cli_orig, cld_orig, user_agent, result, lrn_cld_in, lrn_cld, p_asserted_id, i_call_type, buying_dcg, remote_party_id):
    """
    Parameters:
     - parent_i_call
     - i_account
     - cli
     - cld
     - cost
     - call_id
     - setup_ts
     - remote_ip
     - cli_orig
     - cld_orig
     - user_agent
     - result
     - lrn_cld_in
     - lrn_cld
     - p_asserted_id
     - i_call_type
     - buying_dcg
     - remote_party_id
    """
    self.send_call_error(parent_i_call, i_account, cli, cld, cost, call_id, setup_ts, remote_ip, cli_orig, cld_orig, user_agent, result, lrn_cld_in, lrn_cld, p_asserted_id, i_call_type, buying_dcg, remote_party_id)

  def send_call_error(self, parent_i_call, i_account, cli, cld, cost, call_id, setup_ts, remote_ip, cli_orig, cld_orig, user_agent, result, lrn_cld_in, lrn_cld, p_asserted_id, i_call_type, buying_dcg, remote_party_id):
    self._oprot.writeMessageBegin('call_error', TMessageType.CALL, self._seqid)
    args = call_error_args()
    args.parent_i_call = parent_i_call
    args.i_account = i_account
    args.cli = cli
    args.cld = cld
    args.cost = cost
    args.call_id = call_id
    args.setup_ts = setup_ts
    args.remote_ip = remote_ip
    args.cli_orig = cli_orig
    args.cld_orig = cld_orig
    args.user_agent = user_agent
    args.result = result
    args.lrn_cld_in = lrn_cld_in
    args.lrn_cld = lrn_cld
    args.p_asserted_id = p_asserted_id
    args.i_call_type = i_call_type
    args.buying_dcg = buying_dcg
    args.remote_party_id = remote_party_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def register_call(self, parent_i_call, i_account, disallow_loops, acc_max_sessions, call_id, cld, cli, setup_ts, i_billing_plan, billing_plan_suspended, account_billables, accessibility_billables, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, max_calls_per_second, translation_cost, did_charging_group, is_late_dcg, average_duration, max_credit_time, sess_id, round_up, p_asserted_id, i_call_type, remote_party_id):
    """
    Parameters:
     - parent_i_call
     - i_account
     - disallow_loops
     - acc_max_sessions
     - call_id
     - cld
     - cli
     - setup_ts
     - i_billing_plan
     - billing_plan_suspended
     - account_billables
     - accessibility_billables
     - remote_ip
     - cli_orig
     - cld_orig
     - i_protocol
     - user_agent
     - max_calls_per_second
     - translation_cost
     - did_charging_group
     - is_late_dcg
     - average_duration
     - max_credit_time
     - sess_id
     - round_up
     - p_asserted_id
     - i_call_type
     - remote_party_id
    """
    self.send_register_call(parent_i_call, i_account, disallow_loops, acc_max_sessions, call_id, cld, cli, setup_ts, i_billing_plan, billing_plan_suspended, account_billables, accessibility_billables, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, max_calls_per_second, translation_cost, did_charging_group, is_late_dcg, average_duration, max_credit_time, sess_id, round_up, p_asserted_id, i_call_type, remote_party_id)
    return self.recv_register_call()

  def send_register_call(self, parent_i_call, i_account, disallow_loops, acc_max_sessions, call_id, cld, cli, setup_ts, i_billing_plan, billing_plan_suspended, account_billables, accessibility_billables, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, max_calls_per_second, translation_cost, did_charging_group, is_late_dcg, average_duration, max_credit_time, sess_id, round_up, p_asserted_id, i_call_type, remote_party_id):
    self._oprot.writeMessageBegin('register_call', TMessageType.CALL, self._seqid)
    args = register_call_args()
    args.parent_i_call = parent_i_call
    args.i_account = i_account
    args.disallow_loops = disallow_loops
    args.acc_max_sessions = acc_max_sessions
    args.call_id = call_id
    args.cld = cld
    args.cli = cli
    args.setup_ts = setup_ts
    args.i_billing_plan = i_billing_plan
    args.billing_plan_suspended = billing_plan_suspended
    args.account_billables = account_billables
    args.accessibility_billables = accessibility_billables
    args.remote_ip = remote_ip
    args.cli_orig = cli_orig
    args.cld_orig = cld_orig
    args.i_protocol = i_protocol
    args.user_agent = user_agent
    args.max_calls_per_second = max_calls_per_second
    args.translation_cost = translation_cost
    args.did_charging_group = did_charging_group
    args.is_late_dcg = is_late_dcg
    args.average_duration = average_duration
    args.max_credit_time = max_credit_time
    args.sess_id = sess_id
    args.round_up = round_up
    args.p_asserted_id = p_asserted_id
    args.i_call_type = i_call_type
    args.remote_party_id = remote_party_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_register_call(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = register_call_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.register_error is not None:
      raise result.register_error
    raise TApplicationException(TApplicationException.MISSING_RESULT, "register_call failed: unknown result");

  def register_virtual(self, bind_session_id, i_call, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, i_account, i_billing_plan, billing_plan_suspended, cld, account_billables, accessibility_billables, rtime, translation_cost, max_credit_time, sess_id, round_up, p_asserted_id, remote_party_id):
    """
    Parameters:
     - bind_session_id
     - i_call
     - remote_ip
     - cli_orig
     - cld_orig
     - i_protocol
     - user_agent
     - i_account
     - i_billing_plan
     - billing_plan_suspended
     - cld
     - account_billables
     - accessibility_billables
     - rtime
     - translation_cost
     - max_credit_time
     - sess_id
     - round_up
     - p_asserted_id
     - remote_party_id
    """
    self.send_register_virtual(bind_session_id, i_call, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, i_account, i_billing_plan, billing_plan_suspended, cld, account_billables, accessibility_billables, rtime, translation_cost, max_credit_time, sess_id, round_up, p_asserted_id, remote_party_id)
    self.recv_register_virtual()

  def send_register_virtual(self, bind_session_id, i_call, remote_ip, cli_orig, cld_orig, i_protocol, user_agent, i_account, i_billing_plan, billing_plan_suspended, cld, account_billables, accessibility_billables, rtime, translation_cost, max_credit_time, sess_id, round_up, p_asserted_id, remote_party_id):
    self._oprot.writeMessageBegin('register_virtual', TMessageType.CALL, self._seqid)
    args = register_virtual_args()
    args.bind_session_id = bind_session_id
    args.i_call = i_call
    args.remote_ip = remote_ip
    args.cli_orig = cli_orig
    args.cld_orig = cld_orig
    args.i_protocol = i_protocol
    args.user_agent = user_agent
    args.i_account = i_account
    args.i_billing_plan = i_billing_plan
    args.billing_plan_suspended = billing_plan_suspended
    args.cld = cld
    args.account_billables = account_billables
    args.accessibility_billables = accessibility_billables
    args.rtime = rtime
    args.translation_cost = translation_cost
    args.max_credit_time = max_credit_time
    args.sess_id = sess_id
    args.round_up = round_up
    args.p_asserted_id = p_asserted_id
    args.remote_party_id = remote_party_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_register_virtual(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = register_virtual_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.register_error is not None:
      raise result.register_error
    return

  def stats_all(self):
    self.send_stats_all()
    return self.recv_stats_all()

  def send_stats_all(self):
    self._oprot.writeMessageBegin('stats_all', TMessageType.CALL, self._seqid)
    args = stats_all_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stats_all(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stats_all_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stats_all failed: unknown result");

  def stats_total(self):
    self.send_stats_total()
    return self.recv_stats_total()

  def send_stats_total(self):
    self._oprot.writeMessageBegin('stats_total', TMessageType.CALL, self._seqid)
    args = stats_total_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stats_total(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stats_total_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stats_total failed: unknown result");

  def sess_started(self, sess_id, rtime, crtime_ext, p1xx_ts):
    """
    Parameters:
     - sess_id
     - rtime
     - crtime_ext
     - p1xx_ts
    """
    self.send_sess_started(sess_id, rtime, crtime_ext, p1xx_ts)

  def send_sess_started(self, sess_id, rtime, crtime_ext, p1xx_ts):
    self._oprot.writeMessageBegin('sess_started', TMessageType.CALL, self._seqid)
    args = sess_started_args()
    args.sess_id = sess_id
    args.rtime = rtime
    args.crtime_ext = crtime_ext
    args.p1xx_ts = p1xx_ts
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def write_cdr(self, i_account, duration, delay, pdd1xx, connected, account_billables, accessibility_billables, customer_billables, rtime, origin, result, i_billing_plan, i_call, remote_ip, cld, cli_orig, cld_orig, setup_ts, user_agent, i_protocol, translation_cost, dcg, is_late_dcg, billing_plan_suspended, lrn_cld_in, lrn_cld, round_up, p_asserted_id, buying_dcg, remote_party_id, sdp_list, customer_dcgs):
    """
    Parameters:
     - i_account
     - duration
     - delay
     - pdd1xx
     - connected
     - account_billables
     - accessibility_billables
     - customer_billables
     - rtime
     - origin
     - result
     - i_billing_plan
     - i_call
     - remote_ip
     - cld
     - cli_orig
     - cld_orig
     - setup_ts
     - user_agent
     - i_protocol
     - translation_cost
     - dcg
     - is_late_dcg
     - billing_plan_suspended
     - lrn_cld_in
     - lrn_cld
     - round_up
     - p_asserted_id
     - buying_dcg
     - remote_party_id
     - sdp_list
     - customer_dcgs
    """
    self.send_write_cdr(i_account, duration, delay, pdd1xx, connected, account_billables, accessibility_billables, customer_billables, rtime, origin, result, i_billing_plan, i_call, remote_ip, cld, cli_orig, cld_orig, setup_ts, user_agent, i_protocol, translation_cost, dcg, is_late_dcg, billing_plan_suspended, lrn_cld_in, lrn_cld, round_up, p_asserted_id, buying_dcg, remote_party_id, sdp_list, customer_dcgs)

  def send_write_cdr(self, i_account, duration, delay, pdd1xx, connected, account_billables, accessibility_billables, customer_billables, rtime, origin, result, i_billing_plan, i_call, remote_ip, cld, cli_orig, cld_orig, setup_ts, user_agent, i_protocol, translation_cost, dcg, is_late_dcg, billing_plan_suspended, lrn_cld_in, lrn_cld, round_up, p_asserted_id, buying_dcg, remote_party_id, sdp_list, customer_dcgs):
    self._oprot.writeMessageBegin('write_cdr', TMessageType.CALL, self._seqid)
    args = write_cdr_args()
    args.i_account = i_account
    args.duration = duration
    args.delay = delay
    args.pdd1xx = pdd1xx
    args.connected = connected
    args.account_billables = account_billables
    args.accessibility_billables = accessibility_billables
    args.customer_billables = customer_billables
    args.rtime = rtime
    args.origin = origin
    args.result = result
    args.i_billing_plan = i_billing_plan
    args.i_call = i_call
    args.remote_ip = remote_ip
    args.cld = cld
    args.cli_orig = cli_orig
    args.cld_orig = cld_orig
    args.setup_ts = setup_ts
    args.user_agent = user_agent
    args.i_protocol = i_protocol
    args.translation_cost = translation_cost
    args.dcg = dcg
    args.is_late_dcg = is_late_dcg
    args.billing_plan_suspended = billing_plan_suspended
    args.lrn_cld_in = lrn_cld_in
    args.lrn_cld = lrn_cld
    args.round_up = round_up
    args.p_asserted_id = p_asserted_id
    args.buying_dcg = buying_dcg
    args.remote_party_id = remote_party_id
    args.sdp_list = sdp_list
    args.customer_dcgs = customer_dcgs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def sess_ended(self, b2bua_id, sess_id, customer_billables, duration, delay, pdd1xx, connected, rtime, origin, result, lrn_cld_in, lrn_cld, buying_dcg, sdp_list, customer_dcgs):
    """
    Parameters:
     - b2bua_id
     - sess_id
     - customer_billables
     - duration
     - delay
     - pdd1xx
     - connected
     - rtime
     - origin
     - result
     - lrn_cld_in
     - lrn_cld
     - buying_dcg
     - sdp_list
     - customer_dcgs
    """
    self.send_sess_ended(b2bua_id, sess_id, customer_billables, duration, delay, pdd1xx, connected, rtime, origin, result, lrn_cld_in, lrn_cld, buying_dcg, sdp_list, customer_dcgs)
    self.recv_sess_ended()

  def send_sess_ended(self, b2bua_id, sess_id, customer_billables, duration, delay, pdd1xx, connected, rtime, origin, result, lrn_cld_in, lrn_cld, buying_dcg, sdp_list, customer_dcgs):
    self._oprot.writeMessageBegin('sess_ended', TMessageType.CALL, self._seqid)
    args = sess_ended_args()
    args.b2bua_id = b2bua_id
    args.sess_id = sess_id
    args.customer_billables = customer_billables
    args.duration = duration
    args.delay = delay
    args.pdd1xx = pdd1xx
    args.connected = connected
    args.rtime = rtime
    args.origin = origin
    args.result = result
    args.lrn_cld_in = lrn_cld_in
    args.lrn_cld = lrn_cld
    args.buying_dcg = buying_dcg
    args.sdp_list = sdp_list
    args.customer_dcgs = customer_dcgs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sess_ended(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sess_ended_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.try_backup_error is not None:
      raise result.try_backup_error
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["next_i_call"] = Processor.process_next_i_call
    self._processMap["current_i_call"] = Processor.process_current_i_call
    self._processMap["next_i_cdrs_connection"] = Processor.process_next_i_cdrs_connection
    self._processMap["b2bua_stopped"] = Processor.process_b2bua_stopped
    self._processMap["register_b2bua"] = Processor.process_register_b2bua
    self._processMap["call_error"] = Processor.process_call_error
    self._processMap["register_call"] = Processor.process_register_call
    self._processMap["register_virtual"] = Processor.process_register_virtual
    self._processMap["stats_all"] = Processor.process_stats_all
    self._processMap["stats_total"] = Processor.process_stats_total
    self._processMap["sess_started"] = Processor.process_sess_started
    self._processMap["write_cdr"] = Processor.process_write_cdr
    self._processMap["sess_ended"] = Processor.process_sess_ended

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_next_i_call(self, seqid, iprot, oprot):
    args = next_i_call_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = next_i_call_result()
    result.success = self._handler.next_i_call()
    oprot.writeMessageBegin("next_i_call", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_current_i_call(self, seqid, iprot, oprot):
    args = current_i_call_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = current_i_call_result()
    result.success = self._handler.current_i_call()
    oprot.writeMessageBegin("current_i_call", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_next_i_cdrs_connection(self, seqid, iprot, oprot):
    args = next_i_cdrs_connection_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = next_i_cdrs_connection_result()
    result.success = self._handler.next_i_cdrs_connection()
    oprot.writeMessageBegin("next_i_cdrs_connection", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_b2bua_stopped(self, seqid, iprot, oprot):
    args = b2bua_stopped_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.b2bua_stopped(args.b2bua_id, args.rtime)
    return

  def process_register_b2bua(self, seqid, iprot, oprot):
    args = register_b2bua_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = register_b2bua_result()
    self._handler.register_b2bua(args.b2bua_id, args.uri, args.pid)
    oprot.writeMessageBegin("register_b2bua", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_call_error(self, seqid, iprot, oprot):
    args = call_error_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.call_error(args.parent_i_call, args.i_account, args.cli, args.cld, args.cost, args.call_id, args.setup_ts, args.remote_ip, args.cli_orig, args.cld_orig, args.user_agent, args.result, args.lrn_cld_in, args.lrn_cld, args.p_asserted_id, args.i_call_type, args.buying_dcg, args.remote_party_id)
    return

  def process_register_call(self, seqid, iprot, oprot):
    args = register_call_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = register_call_result()
    try:
      result.success = self._handler.register_call(args.parent_i_call, args.i_account, args.disallow_loops, args.acc_max_sessions, args.call_id, args.cld, args.cli, args.setup_ts, args.i_billing_plan, args.billing_plan_suspended, args.account_billables, args.accessibility_billables, args.remote_ip, args.cli_orig, args.cld_orig, args.i_protocol, args.user_agent, args.max_calls_per_second, args.translation_cost, args.did_charging_group, args.is_late_dcg, args.average_duration, args.max_credit_time, args.sess_id, args.round_up, args.p_asserted_id, args.i_call_type, args.remote_party_id)
    except RegisterError, register_error:
      result.register_error = register_error
    oprot.writeMessageBegin("register_call", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_register_virtual(self, seqid, iprot, oprot):
    args = register_virtual_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = register_virtual_result()
    try:
      self._handler.register_virtual(args.bind_session_id, args.i_call, args.remote_ip, args.cli_orig, args.cld_orig, args.i_protocol, args.user_agent, args.i_account, args.i_billing_plan, args.billing_plan_suspended, args.cld, args.account_billables, args.accessibility_billables, args.rtime, args.translation_cost, args.max_credit_time, args.sess_id, args.round_up, args.p_asserted_id, args.remote_party_id)
    except RegisterError, register_error:
      result.register_error = register_error
    oprot.writeMessageBegin("register_virtual", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stats_all(self, seqid, iprot, oprot):
    args = stats_all_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stats_all_result()
    result.success = self._handler.stats_all()
    oprot.writeMessageBegin("stats_all", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stats_total(self, seqid, iprot, oprot):
    args = stats_total_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stats_total_result()
    result.success = self._handler.stats_total()
    oprot.writeMessageBegin("stats_total", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sess_started(self, seqid, iprot, oprot):
    args = sess_started_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.sess_started(args.sess_id, args.rtime, args.crtime_ext, args.p1xx_ts)
    return

  def process_write_cdr(self, seqid, iprot, oprot):
    args = write_cdr_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.write_cdr(args.i_account, args.duration, args.delay, args.pdd1xx, args.connected, args.account_billables, args.accessibility_billables, args.customer_billables, args.rtime, args.origin, args.result, args.i_billing_plan, args.i_call, args.remote_ip, args.cld, args.cli_orig, args.cld_orig, args.setup_ts, args.user_agent, args.i_protocol, args.translation_cost, args.dcg, args.is_late_dcg, args.billing_plan_suspended, args.lrn_cld_in, args.lrn_cld, args.round_up, args.p_asserted_id, args.buying_dcg, args.remote_party_id, args.sdp_list, args.customer_dcgs)
    return

  def process_sess_ended(self, seqid, iprot, oprot):
    args = sess_ended_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sess_ended_result()
    try:
      self._handler.sess_ended(args.b2bua_id, args.sess_id, args.customer_billables, args.duration, args.delay, args.pdd1xx, args.connected, args.rtime, args.origin, args.result, args.lrn_cld_in, args.lrn_cld, args.buying_dcg, args.sdp_list, args.customer_dcgs)
    except TryBackupError, try_backup_error:
      result.try_backup_error = try_backup_error
    oprot.writeMessageBegin("sess_ended", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class next_i_call_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('next_i_call_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class next_i_call_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('next_i_call_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class current_i_call_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('current_i_call_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class current_i_call_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('current_i_call_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class next_i_cdrs_connection_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('next_i_cdrs_connection_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class next_i_cdrs_connection_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('next_i_cdrs_connection_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class b2bua_stopped_args(object):
  """
  Attributes:
   - b2bua_id
   - rtime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'b2bua_id', None, None, ), # 1
    (2, TType.STRUCT, 'rtime', (MonoTime, MonoTime.thrift_spec), None, ), # 2
  )

  def __init__(self, b2bua_id=None, rtime=None,):
    self.b2bua_id = b2bua_id
    self.rtime = rtime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.b2bua_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rtime = MonoTime()
          self.rtime.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('b2bua_stopped_args')
    if self.b2bua_id is not None:
      oprot.writeFieldBegin('b2bua_id', TType.STRING, 1)
      oprot.writeString(self.b2bua_id)
      oprot.writeFieldEnd()
    if self.rtime is not None:
      oprot.writeFieldBegin('rtime', TType.STRUCT, 2)
      self.rtime.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_b2bua_args(object):
  """
  Attributes:
   - b2bua_id
   - uri
   - pid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'b2bua_id', None, None, ), # 1
    (2, TType.STRING, 'uri', None, None, ), # 2
    (3, TType.I32, 'pid', None, None, ), # 3
  )

  def __init__(self, b2bua_id=None, uri=None, pid=None,):
    self.b2bua_id = b2bua_id
    self.uri = uri
    self.pid = pid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.b2bua_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_b2bua_args')
    if self.b2bua_id is not None:
      oprot.writeFieldBegin('b2bua_id', TType.STRING, 1)
      oprot.writeString(self.b2bua_id)
      oprot.writeFieldEnd()
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 2)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 3)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_b2bua_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_b2bua_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class call_error_args(object):
  """
  Attributes:
   - parent_i_call
   - i_account
   - cli
   - cld
   - cost
   - call_id
   - setup_ts
   - remote_ip
   - cli_orig
   - cld_orig
   - user_agent
   - result
   - lrn_cld_in
   - lrn_cld
   - p_asserted_id
   - i_call_type
   - buying_dcg
   - remote_party_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'parent_i_call', (NullInt64, NullInt64.thrift_spec), None, ), # 1
    (2, TType.I64, 'i_account', None, None, ), # 2
    (3, TType.STRING, 'cli', None, None, ), # 3
    (4, TType.STRING, 'cld', None, None, ), # 4
    (5, TType.DOUBLE, 'cost', None, None, ), # 5
    (6, TType.STRING, 'call_id', None, None, ), # 6
    (7, TType.STRUCT, 'setup_ts', (MonoTime, MonoTime.thrift_spec), None, ), # 7
    (8, TType.STRING, 'remote_ip', None, None, ), # 8
    (9, TType.STRING, 'cli_orig', None, None, ), # 9
    (10, TType.STRING, 'cld_orig', None, None, ), # 10
    (11, TType.STRING, 'user_agent', None, None, ), # 11
    (12, TType.I32, 'result', None, None, ), # 12
    (13, TType.STRUCT, 'lrn_cld_in', (NullString, NullString.thrift_spec), None, ), # 13
    (14, TType.STRUCT, 'lrn_cld', (NullString, NullString.thrift_spec), None, ), # 14
    (15, TType.STRUCT, 'p_asserted_id', (NullString, NullString.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'i_call_type', (NullInt64, NullInt64.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'buying_dcg', (BuyingDidBillables, BuyingDidBillables.thrift_spec), None, ), # 17
    (18, TType.STRUCT, 'remote_party_id', (NullString, NullString.thrift_spec), None, ), # 18
  )

  def __init__(self, parent_i_call=None, i_account=None, cli=None, cld=None, cost=None, call_id=None, setup_ts=None, remote_ip=None, cli_orig=None, cld_orig=None, user_agent=None, result=None, lrn_cld_in=None, lrn_cld=None, p_asserted_id=None, i_call_type=None, buying_dcg=None, remote_party_id=None,):
    self.parent_i_call = parent_i_call
    self.i_account = i_account
    self.cli = cli
    self.cld = cld
    self.cost = cost
    self.call_id = call_id
    self.setup_ts = setup_ts
    self.remote_ip = remote_ip
    self.cli_orig = cli_orig
    self.cld_orig = cld_orig
    self.user_agent = user_agent
    self.result = result
    self.lrn_cld_in = lrn_cld_in
    self.lrn_cld = lrn_cld
    self.p_asserted_id = p_asserted_id
    self.i_call_type = i_call_type
    self.buying_dcg = buying_dcg
    self.remote_party_id = remote_party_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.parent_i_call = NullInt64()
          self.parent_i_call.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.i_account = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.cli = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cld = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.cost = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.call_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.setup_ts = MonoTime()
          self.setup_ts.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.remote_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.cli_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.cld_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.user_agent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.lrn_cld_in = NullString()
          self.lrn_cld_in.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.lrn_cld = NullString()
          self.lrn_cld.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.p_asserted_id = NullString()
          self.p_asserted_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.i_call_type = NullInt64()
          self.i_call_type.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.buying_dcg = BuyingDidBillables()
          self.buying_dcg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.remote_party_id = NullString()
          self.remote_party_id.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('call_error_args')
    if self.parent_i_call is not None:
      oprot.writeFieldBegin('parent_i_call', TType.STRUCT, 1)
      self.parent_i_call.write(oprot)
      oprot.writeFieldEnd()
    if self.i_account is not None:
      oprot.writeFieldBegin('i_account', TType.I64, 2)
      oprot.writeI64(self.i_account)
      oprot.writeFieldEnd()
    if self.cli is not None:
      oprot.writeFieldBegin('cli', TType.STRING, 3)
      oprot.writeString(self.cli)
      oprot.writeFieldEnd()
    if self.cld is not None:
      oprot.writeFieldBegin('cld', TType.STRING, 4)
      oprot.writeString(self.cld)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.DOUBLE, 5)
      oprot.writeDouble(self.cost)
      oprot.writeFieldEnd()
    if self.call_id is not None:
      oprot.writeFieldBegin('call_id', TType.STRING, 6)
      oprot.writeString(self.call_id)
      oprot.writeFieldEnd()
    if self.setup_ts is not None:
      oprot.writeFieldBegin('setup_ts', TType.STRUCT, 7)
      self.setup_ts.write(oprot)
      oprot.writeFieldEnd()
    if self.remote_ip is not None:
      oprot.writeFieldBegin('remote_ip', TType.STRING, 8)
      oprot.writeString(self.remote_ip)
      oprot.writeFieldEnd()
    if self.cli_orig is not None:
      oprot.writeFieldBegin('cli_orig', TType.STRING, 9)
      oprot.writeString(self.cli_orig)
      oprot.writeFieldEnd()
    if self.cld_orig is not None:
      oprot.writeFieldBegin('cld_orig', TType.STRING, 10)
      oprot.writeString(self.cld_orig)
      oprot.writeFieldEnd()
    if self.user_agent is not None:
      oprot.writeFieldBegin('user_agent', TType.STRING, 11)
      oprot.writeString(self.user_agent)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 12)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.lrn_cld_in is not None:
      oprot.writeFieldBegin('lrn_cld_in', TType.STRUCT, 13)
      self.lrn_cld_in.write(oprot)
      oprot.writeFieldEnd()
    if self.lrn_cld is not None:
      oprot.writeFieldBegin('lrn_cld', TType.STRUCT, 14)
      self.lrn_cld.write(oprot)
      oprot.writeFieldEnd()
    if self.p_asserted_id is not None:
      oprot.writeFieldBegin('p_asserted_id', TType.STRUCT, 15)
      self.p_asserted_id.write(oprot)
      oprot.writeFieldEnd()
    if self.i_call_type is not None:
      oprot.writeFieldBegin('i_call_type', TType.STRUCT, 16)
      self.i_call_type.write(oprot)
      oprot.writeFieldEnd()
    if self.buying_dcg is not None:
      oprot.writeFieldBegin('buying_dcg', TType.STRUCT, 17)
      self.buying_dcg.write(oprot)
      oprot.writeFieldEnd()
    if self.remote_party_id is not None:
      oprot.writeFieldBegin('remote_party_id', TType.STRUCT, 18)
      self.remote_party_id.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_call_args(object):
  """
  Attributes:
   - parent_i_call
   - i_account
   - disallow_loops
   - acc_max_sessions
   - call_id
   - cld
   - cli
   - setup_ts
   - i_billing_plan
   - billing_plan_suspended
   - account_billables
   - accessibility_billables
   - remote_ip
   - cli_orig
   - cld_orig
   - i_protocol
   - user_agent
   - max_calls_per_second
   - translation_cost
   - did_charging_group
   - is_late_dcg
   - average_duration
   - max_credit_time
   - sess_id
   - round_up
   - p_asserted_id
   - i_call_type
   - remote_party_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'parent_i_call', (NullInt64, NullInt64.thrift_spec), None, ), # 1
    (2, TType.I64, 'i_account', None, None, ), # 2
    (3, TType.BOOL, 'disallow_loops', None, None, ), # 3
    (4, TType.I32, 'acc_max_sessions', None, None, ), # 4
    (5, TType.STRING, 'call_id', None, None, ), # 5
    (6, TType.STRING, 'cld', None, None, ), # 6
    (7, TType.STRING, 'cli', None, None, ), # 7
    (8, TType.STRUCT, 'setup_ts', (MonoTime, MonoTime.thrift_spec), None, ), # 8
    (9, TType.I64, 'i_billing_plan', None, None, ), # 9
    (10, TType.BOOL, 'billing_plan_suspended', None, None, ), # 10
    (11, TType.STRUCT, 'account_billables', (AccountBillables, AccountBillables.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'accessibility_billables', (Billables, Billables.thrift_spec), None, ), # 12
    (13, TType.STRING, 'remote_ip', None, None, ), # 13
    (14, TType.STRING, 'cli_orig', None, None, ), # 14
    (15, TType.STRING, 'cld_orig', None, None, ), # 15
    (16, TType.I16, 'i_protocol', None, None, ), # 16
    (17, TType.STRING, 'user_agent', None, None, ), # 17
    (18, TType.DOUBLE, 'max_calls_per_second', None, None, ), # 18
    (19, TType.DOUBLE, 'translation_cost', None, None, ), # 19
    None, # 20
    (21, TType.STRUCT, 'did_charging_group', (DidBillables, DidBillables.thrift_spec), None, ), # 21
    (22, TType.BOOL, 'is_late_dcg', None, None, ), # 22
    (23, TType.I64, 'average_duration', None, None, ), # 23
    (24, TType.I64, 'max_credit_time', None, None, ), # 24
    (25, TType.STRING, 'sess_id', None, None, ), # 25
    (26, TType.BOOL, 'round_up', None, None, ), # 26
    (27, TType.STRUCT, 'p_asserted_id', (NullString, NullString.thrift_spec), None, ), # 27
    (28, TType.STRUCT, 'i_call_type', (NullInt64, NullInt64.thrift_spec), None, ), # 28
    (29, TType.STRUCT, 'remote_party_id', (NullString, NullString.thrift_spec), None, ), # 29
  )

  def __init__(self, parent_i_call=None, i_account=None, disallow_loops=None, acc_max_sessions=None, call_id=None, cld=None, cli=None, setup_ts=None, i_billing_plan=None, billing_plan_suspended=None, account_billables=None, accessibility_billables=None, remote_ip=None, cli_orig=None, cld_orig=None, i_protocol=None, user_agent=None, max_calls_per_second=None, translation_cost=None, did_charging_group=None, is_late_dcg=None, average_duration=None, max_credit_time=None, sess_id=None, round_up=None, p_asserted_id=None, i_call_type=None, remote_party_id=None,):
    self.parent_i_call = parent_i_call
    self.i_account = i_account
    self.disallow_loops = disallow_loops
    self.acc_max_sessions = acc_max_sessions
    self.call_id = call_id
    self.cld = cld
    self.cli = cli
    self.setup_ts = setup_ts
    self.i_billing_plan = i_billing_plan
    self.billing_plan_suspended = billing_plan_suspended
    self.account_billables = account_billables
    self.accessibility_billables = accessibility_billables
    self.remote_ip = remote_ip
    self.cli_orig = cli_orig
    self.cld_orig = cld_orig
    self.i_protocol = i_protocol
    self.user_agent = user_agent
    self.max_calls_per_second = max_calls_per_second
    self.translation_cost = translation_cost
    self.did_charging_group = did_charging_group
    self.is_late_dcg = is_late_dcg
    self.average_duration = average_duration
    self.max_credit_time = max_credit_time
    self.sess_id = sess_id
    self.round_up = round_up
    self.p_asserted_id = p_asserted_id
    self.i_call_type = i_call_type
    self.remote_party_id = remote_party_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.parent_i_call = NullInt64()
          self.parent_i_call.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.i_account = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.disallow_loops = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.acc_max_sessions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.call_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cld = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cli = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.setup_ts = MonoTime()
          self.setup_ts.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.i_billing_plan = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.billing_plan_suspended = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.account_billables = AccountBillables()
          self.account_billables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.accessibility_billables = Billables()
          self.accessibility_billables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.remote_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.cli_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.cld_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I16:
          self.i_protocol = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.user_agent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.max_calls_per_second = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.translation_cost = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRUCT:
          self.did_charging_group = DidBillables()
          self.did_charging_group.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.is_late_dcg = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          self.average_duration = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.max_credit_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.sess_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.BOOL:
          self.round_up = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRUCT:
          self.p_asserted_id = NullString()
          self.p_asserted_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRUCT:
          self.i_call_type = NullInt64()
          self.i_call_type.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRUCT:
          self.remote_party_id = NullString()
          self.remote_party_id.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_call_args')
    if self.parent_i_call is not None:
      oprot.writeFieldBegin('parent_i_call', TType.STRUCT, 1)
      self.parent_i_call.write(oprot)
      oprot.writeFieldEnd()
    if self.i_account is not None:
      oprot.writeFieldBegin('i_account', TType.I64, 2)
      oprot.writeI64(self.i_account)
      oprot.writeFieldEnd()
    if self.disallow_loops is not None:
      oprot.writeFieldBegin('disallow_loops', TType.BOOL, 3)
      oprot.writeBool(self.disallow_loops)
      oprot.writeFieldEnd()
    if self.acc_max_sessions is not None:
      oprot.writeFieldBegin('acc_max_sessions', TType.I32, 4)
      oprot.writeI32(self.acc_max_sessions)
      oprot.writeFieldEnd()
    if self.call_id is not None:
      oprot.writeFieldBegin('call_id', TType.STRING, 5)
      oprot.writeString(self.call_id)
      oprot.writeFieldEnd()
    if self.cld is not None:
      oprot.writeFieldBegin('cld', TType.STRING, 6)
      oprot.writeString(self.cld)
      oprot.writeFieldEnd()
    if self.cli is not None:
      oprot.writeFieldBegin('cli', TType.STRING, 7)
      oprot.writeString(self.cli)
      oprot.writeFieldEnd()
    if self.setup_ts is not None:
      oprot.writeFieldBegin('setup_ts', TType.STRUCT, 8)
      self.setup_ts.write(oprot)
      oprot.writeFieldEnd()
    if self.i_billing_plan is not None:
      oprot.writeFieldBegin('i_billing_plan', TType.I64, 9)
      oprot.writeI64(self.i_billing_plan)
      oprot.writeFieldEnd()
    if self.billing_plan_suspended is not None:
      oprot.writeFieldBegin('billing_plan_suspended', TType.BOOL, 10)
      oprot.writeBool(self.billing_plan_suspended)
      oprot.writeFieldEnd()
    if self.account_billables is not None:
      oprot.writeFieldBegin('account_billables', TType.STRUCT, 11)
      self.account_billables.write(oprot)
      oprot.writeFieldEnd()
    if self.accessibility_billables is not None:
      oprot.writeFieldBegin('accessibility_billables', TType.STRUCT, 12)
      self.accessibility_billables.write(oprot)
      oprot.writeFieldEnd()
    if self.remote_ip is not None:
      oprot.writeFieldBegin('remote_ip', TType.STRING, 13)
      oprot.writeString(self.remote_ip)
      oprot.writeFieldEnd()
    if self.cli_orig is not None:
      oprot.writeFieldBegin('cli_orig', TType.STRING, 14)
      oprot.writeString(self.cli_orig)
      oprot.writeFieldEnd()
    if self.cld_orig is not None:
      oprot.writeFieldBegin('cld_orig', TType.STRING, 15)
      oprot.writeString(self.cld_orig)
      oprot.writeFieldEnd()
    if self.i_protocol is not None:
      oprot.writeFieldBegin('i_protocol', TType.I16, 16)
      oprot.writeI16(self.i_protocol)
      oprot.writeFieldEnd()
    if self.user_agent is not None:
      oprot.writeFieldBegin('user_agent', TType.STRING, 17)
      oprot.writeString(self.user_agent)
      oprot.writeFieldEnd()
    if self.max_calls_per_second is not None:
      oprot.writeFieldBegin('max_calls_per_second', TType.DOUBLE, 18)
      oprot.writeDouble(self.max_calls_per_second)
      oprot.writeFieldEnd()
    if self.translation_cost is not None:
      oprot.writeFieldBegin('translation_cost', TType.DOUBLE, 19)
      oprot.writeDouble(self.translation_cost)
      oprot.writeFieldEnd()
    if self.did_charging_group is not None:
      oprot.writeFieldBegin('did_charging_group', TType.STRUCT, 21)
      self.did_charging_group.write(oprot)
      oprot.writeFieldEnd()
    if self.is_late_dcg is not None:
      oprot.writeFieldBegin('is_late_dcg', TType.BOOL, 22)
      oprot.writeBool(self.is_late_dcg)
      oprot.writeFieldEnd()
    if self.average_duration is not None:
      oprot.writeFieldBegin('average_duration', TType.I64, 23)
      oprot.writeI64(self.average_duration)
      oprot.writeFieldEnd()
    if self.max_credit_time is not None:
      oprot.writeFieldBegin('max_credit_time', TType.I64, 24)
      oprot.writeI64(self.max_credit_time)
      oprot.writeFieldEnd()
    if self.sess_id is not None:
      oprot.writeFieldBegin('sess_id', TType.STRING, 25)
      oprot.writeString(self.sess_id)
      oprot.writeFieldEnd()
    if self.round_up is not None:
      oprot.writeFieldBegin('round_up', TType.BOOL, 26)
      oprot.writeBool(self.round_up)
      oprot.writeFieldEnd()
    if self.p_asserted_id is not None:
      oprot.writeFieldBegin('p_asserted_id', TType.STRUCT, 27)
      self.p_asserted_id.write(oprot)
      oprot.writeFieldEnd()
    if self.i_call_type is not None:
      oprot.writeFieldBegin('i_call_type', TType.STRUCT, 28)
      self.i_call_type.write(oprot)
      oprot.writeFieldEnd()
    if self.remote_party_id is not None:
      oprot.writeFieldBegin('remote_party_id', TType.STRUCT, 29)
      self.remote_party_id.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_call_result(object):
  """
  Attributes:
   - success
   - register_error
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'register_error', (RegisterError, RegisterError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, register_error=None,):
    self.success = success
    self.register_error = register_error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.register_error = RegisterError()
          self.register_error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_call_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.register_error is not None:
      oprot.writeFieldBegin('register_error', TType.STRUCT, 1)
      self.register_error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_virtual_args(object):
  """
  Attributes:
   - bind_session_id
   - i_call
   - remote_ip
   - cli_orig
   - cld_orig
   - i_protocol
   - user_agent
   - i_account
   - i_billing_plan
   - billing_plan_suspended
   - cld
   - account_billables
   - accessibility_billables
   - rtime
   - translation_cost
   - max_credit_time
   - sess_id
   - round_up
   - p_asserted_id
   - remote_party_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'bind_session_id', None, None, ), # 1
    (2, TType.I64, 'i_call', None, None, ), # 2
    (3, TType.STRING, 'remote_ip', None, None, ), # 3
    (4, TType.STRING, 'cli_orig', None, None, ), # 4
    (5, TType.STRING, 'cld_orig', None, None, ), # 5
    (6, TType.I16, 'i_protocol', None, None, ), # 6
    (7, TType.STRING, 'user_agent', None, None, ), # 7
    (8, TType.I64, 'i_account', None, None, ), # 8
    (9, TType.I64, 'i_billing_plan', None, None, ), # 9
    (10, TType.BOOL, 'billing_plan_suspended', None, None, ), # 10
    (11, TType.STRING, 'cld', None, None, ), # 11
    (12, TType.STRUCT, 'account_billables', (AccountBillables, AccountBillables.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'accessibility_billables', (Billables, Billables.thrift_spec), None, ), # 13
    (14, TType.STRUCT, 'rtime', (MonoTime, MonoTime.thrift_spec), None, ), # 14
    (15, TType.DOUBLE, 'translation_cost', None, None, ), # 15
    (16, TType.I64, 'max_credit_time', None, None, ), # 16
    (17, TType.STRING, 'sess_id', None, None, ), # 17
    (18, TType.BOOL, 'round_up', None, None, ), # 18
    (19, TType.STRUCT, 'p_asserted_id', (NullString, NullString.thrift_spec), None, ), # 19
    (20, TType.STRUCT, 'remote_party_id', (NullString, NullString.thrift_spec), None, ), # 20
  )

  def __init__(self, bind_session_id=None, i_call=None, remote_ip=None, cli_orig=None, cld_orig=None, i_protocol=None, user_agent=None, i_account=None, i_billing_plan=None, billing_plan_suspended=None, cld=None, account_billables=None, accessibility_billables=None, rtime=None, translation_cost=None, max_credit_time=None, sess_id=None, round_up=None, p_asserted_id=None, remote_party_id=None,):
    self.bind_session_id = bind_session_id
    self.i_call = i_call
    self.remote_ip = remote_ip
    self.cli_orig = cli_orig
    self.cld_orig = cld_orig
    self.i_protocol = i_protocol
    self.user_agent = user_agent
    self.i_account = i_account
    self.i_billing_plan = i_billing_plan
    self.billing_plan_suspended = billing_plan_suspended
    self.cld = cld
    self.account_billables = account_billables
    self.accessibility_billables = accessibility_billables
    self.rtime = rtime
    self.translation_cost = translation_cost
    self.max_credit_time = max_credit_time
    self.sess_id = sess_id
    self.round_up = round_up
    self.p_asserted_id = p_asserted_id
    self.remote_party_id = remote_party_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.bind_session_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.i_call = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.remote_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cli_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cld_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.i_protocol = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.user_agent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.i_account = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.i_billing_plan = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.billing_plan_suspended = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.cld = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.account_billables = AccountBillables()
          self.account_billables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.accessibility_billables = Billables()
          self.accessibility_billables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.rtime = MonoTime()
          self.rtime.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.translation_cost = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.max_credit_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.sess_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.round_up = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.p_asserted_id = NullString()
          self.p_asserted_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.remote_party_id = NullString()
          self.remote_party_id.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_virtual_args')
    if self.bind_session_id is not None:
      oprot.writeFieldBegin('bind_session_id', TType.STRING, 1)
      oprot.writeString(self.bind_session_id)
      oprot.writeFieldEnd()
    if self.i_call is not None:
      oprot.writeFieldBegin('i_call', TType.I64, 2)
      oprot.writeI64(self.i_call)
      oprot.writeFieldEnd()
    if self.remote_ip is not None:
      oprot.writeFieldBegin('remote_ip', TType.STRING, 3)
      oprot.writeString(self.remote_ip)
      oprot.writeFieldEnd()
    if self.cli_orig is not None:
      oprot.writeFieldBegin('cli_orig', TType.STRING, 4)
      oprot.writeString(self.cli_orig)
      oprot.writeFieldEnd()
    if self.cld_orig is not None:
      oprot.writeFieldBegin('cld_orig', TType.STRING, 5)
      oprot.writeString(self.cld_orig)
      oprot.writeFieldEnd()
    if self.i_protocol is not None:
      oprot.writeFieldBegin('i_protocol', TType.I16, 6)
      oprot.writeI16(self.i_protocol)
      oprot.writeFieldEnd()
    if self.user_agent is not None:
      oprot.writeFieldBegin('user_agent', TType.STRING, 7)
      oprot.writeString(self.user_agent)
      oprot.writeFieldEnd()
    if self.i_account is not None:
      oprot.writeFieldBegin('i_account', TType.I64, 8)
      oprot.writeI64(self.i_account)
      oprot.writeFieldEnd()
    if self.i_billing_plan is not None:
      oprot.writeFieldBegin('i_billing_plan', TType.I64, 9)
      oprot.writeI64(self.i_billing_plan)
      oprot.writeFieldEnd()
    if self.billing_plan_suspended is not None:
      oprot.writeFieldBegin('billing_plan_suspended', TType.BOOL, 10)
      oprot.writeBool(self.billing_plan_suspended)
      oprot.writeFieldEnd()
    if self.cld is not None:
      oprot.writeFieldBegin('cld', TType.STRING, 11)
      oprot.writeString(self.cld)
      oprot.writeFieldEnd()
    if self.account_billables is not None:
      oprot.writeFieldBegin('account_billables', TType.STRUCT, 12)
      self.account_billables.write(oprot)
      oprot.writeFieldEnd()
    if self.accessibility_billables is not None:
      oprot.writeFieldBegin('accessibility_billables', TType.STRUCT, 13)
      self.accessibility_billables.write(oprot)
      oprot.writeFieldEnd()
    if self.rtime is not None:
      oprot.writeFieldBegin('rtime', TType.STRUCT, 14)
      self.rtime.write(oprot)
      oprot.writeFieldEnd()
    if self.translation_cost is not None:
      oprot.writeFieldBegin('translation_cost', TType.DOUBLE, 15)
      oprot.writeDouble(self.translation_cost)
      oprot.writeFieldEnd()
    if self.max_credit_time is not None:
      oprot.writeFieldBegin('max_credit_time', TType.I64, 16)
      oprot.writeI64(self.max_credit_time)
      oprot.writeFieldEnd()
    if self.sess_id is not None:
      oprot.writeFieldBegin('sess_id', TType.STRING, 17)
      oprot.writeString(self.sess_id)
      oprot.writeFieldEnd()
    if self.round_up is not None:
      oprot.writeFieldBegin('round_up', TType.BOOL, 18)
      oprot.writeBool(self.round_up)
      oprot.writeFieldEnd()
    if self.p_asserted_id is not None:
      oprot.writeFieldBegin('p_asserted_id', TType.STRUCT, 19)
      self.p_asserted_id.write(oprot)
      oprot.writeFieldEnd()
    if self.remote_party_id is not None:
      oprot.writeFieldBegin('remote_party_id', TType.STRUCT, 20)
      self.remote_party_id.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class register_virtual_result(object):
  """
  Attributes:
   - register_error
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'register_error', (RegisterError, RegisterError.thrift_spec), None, ), # 1
  )

  def __init__(self, register_error=None,):
    self.register_error = register_error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.register_error = RegisterError()
          self.register_error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('register_virtual_result')
    if self.register_error is not None:
      oprot.writeFieldBegin('register_error', TType.STRUCT, 1)
      self.register_error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stats_all_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stats_all_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stats_all_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.LIST,(TType.I64,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype43, _vtype44, _size42 ) = iprot.readMapBegin()
          for _i46 in xrange(_size42):
            _key47 = iprot.readI64();
            _val48 = []
            (_etype52, _size49) = iprot.readListBegin()
            for _i53 in xrange(_size49):
              _elem54 = iprot.readI64();
              _val48.append(_elem54)
            iprot.readListEnd()
            self.success[_key47] = _val48
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stats_all_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.success))
      for kiter55,viter56 in self.success.items():
        oprot.writeI64(kiter55)
        oprot.writeListBegin(TType.I64, len(viter56))
        for iter57 in viter56:
          oprot.writeI64(iter57)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stats_total_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stats_total_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stats_total_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = iprot.readI64();
            self.success.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stats_total_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter64 in self.success:
        oprot.writeI64(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sess_started_args(object):
  """
  Attributes:
   - sess_id
   - rtime
   - crtime_ext
   - p1xx_ts
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sess_id', None, None, ), # 1
    (2, TType.STRUCT, 'rtime', (MonoTime, MonoTime.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'crtime_ext', (Duration, Duration.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'p1xx_ts', (MonoTime, MonoTime.thrift_spec), None, ), # 4
  )

  def __init__(self, sess_id=None, rtime=None, crtime_ext=None, p1xx_ts=None,):
    self.sess_id = sess_id
    self.rtime = rtime
    self.crtime_ext = crtime_ext
    self.p1xx_ts = p1xx_ts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sess_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rtime = MonoTime()
          self.rtime.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.crtime_ext = Duration()
          self.crtime_ext.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.p1xx_ts = MonoTime()
          self.p1xx_ts.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sess_started_args')
    if self.sess_id is not None:
      oprot.writeFieldBegin('sess_id', TType.STRING, 1)
      oprot.writeString(self.sess_id)
      oprot.writeFieldEnd()
    if self.rtime is not None:
      oprot.writeFieldBegin('rtime', TType.STRUCT, 2)
      self.rtime.write(oprot)
      oprot.writeFieldEnd()
    if self.crtime_ext is not None:
      oprot.writeFieldBegin('crtime_ext', TType.STRUCT, 3)
      self.crtime_ext.write(oprot)
      oprot.writeFieldEnd()
    if self.p1xx_ts is not None:
      oprot.writeFieldBegin('p1xx_ts', TType.STRUCT, 4)
      self.p1xx_ts.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class write_cdr_args(object):
  """
  Attributes:
   - i_account
   - duration
   - delay
   - pdd1xx
   - connected
   - account_billables
   - accessibility_billables
   - customer_billables
   - rtime
   - origin
   - result
   - i_billing_plan
   - i_call
   - remote_ip
   - cld
   - cli_orig
   - cld_orig
   - setup_ts
   - user_agent
   - i_protocol
   - translation_cost
   - dcg
   - is_late_dcg
   - billing_plan_suspended
   - lrn_cld_in
   - lrn_cld
   - round_up
   - p_asserted_id
   - buying_dcg
   - remote_party_id
   - sdp_list
   - customer_dcgs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'i_account', None, None, ), # 1
    (2, TType.DOUBLE, 'duration', None, None, ), # 2
    (3, TType.DOUBLE, 'delay', None, None, ), # 3
    (4, TType.DOUBLE, 'pdd1xx', None, None, ), # 4
    (5, TType.BOOL, 'connected', None, None, ), # 5
    (6, TType.STRUCT, 'account_billables', (AccountBillables, AccountBillables.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'accessibility_billables', (Billables, Billables.thrift_spec), None, ), # 7
    (8, TType.LIST, 'customer_billables', (TType.STRUCT,(CustomerBillables, CustomerBillables.thrift_spec)), None, ), # 8
    (9, TType.STRUCT, 'rtime', (MonoTime, MonoTime.thrift_spec), None, ), # 9
    (10, TType.STRING, 'origin', None, None, ), # 10
    (11, TType.I32, 'result', None, None, ), # 11
    (12, TType.I64, 'i_billing_plan', None, None, ), # 12
    (13, TType.I64, 'i_call', None, None, ), # 13
    (14, TType.STRING, 'remote_ip', None, None, ), # 14
    (15, TType.STRING, 'cld', None, None, ), # 15
    (16, TType.STRING, 'cli_orig', None, None, ), # 16
    (17, TType.STRING, 'cld_orig', None, None, ), # 17
    (18, TType.STRUCT, 'setup_ts', (MonoTime, MonoTime.thrift_spec), None, ), # 18
    (19, TType.STRING, 'user_agent', None, None, ), # 19
    (20, TType.I16, 'i_protocol', None, None, ), # 20
    (21, TType.DOUBLE, 'translation_cost', None, None, ), # 21
    (22, TType.STRUCT, 'dcg', (DidBillables, DidBillables.thrift_spec), None, ), # 22
    (23, TType.BOOL, 'is_late_dcg', None, None, ), # 23
    (24, TType.BOOL, 'billing_plan_suspended', None, None, ), # 24
    (25, TType.STRUCT, 'lrn_cld_in', (NullString, NullString.thrift_spec), None, ), # 25
    (26, TType.STRUCT, 'lrn_cld', (NullString, NullString.thrift_spec), None, ), # 26
    (27, TType.BOOL, 'round_up', None, None, ), # 27
    (28, TType.STRUCT, 'p_asserted_id', (NullString, NullString.thrift_spec), None, ), # 28
    (29, TType.STRUCT, 'buying_dcg', (BuyingDidBillables, BuyingDidBillables.thrift_spec), None, ), # 29
    (30, TType.STRUCT, 'remote_party_id', (NullString, NullString.thrift_spec), None, ), # 30
    (31, TType.LIST, 'sdp_list', (TType.STRUCT,(CallsSdp, CallsSdp.thrift_spec)), None, ), # 31
    (32, TType.LIST, 'customer_dcgs', (TType.STRUCT,(CustomerDidBillables, CustomerDidBillables.thrift_spec)), None, ), # 32
  )

  def __init__(self, i_account=None, duration=None, delay=None, pdd1xx=None, connected=None, account_billables=None, accessibility_billables=None, customer_billables=None, rtime=None, origin=None, result=None, i_billing_plan=None, i_call=None, remote_ip=None, cld=None, cli_orig=None, cld_orig=None, setup_ts=None, user_agent=None, i_protocol=None, translation_cost=None, dcg=None, is_late_dcg=None, billing_plan_suspended=None, lrn_cld_in=None, lrn_cld=None, round_up=None, p_asserted_id=None, buying_dcg=None, remote_party_id=None, sdp_list=None, customer_dcgs=None,):
    self.i_account = i_account
    self.duration = duration
    self.delay = delay
    self.pdd1xx = pdd1xx
    self.connected = connected
    self.account_billables = account_billables
    self.accessibility_billables = accessibility_billables
    self.customer_billables = customer_billables
    self.rtime = rtime
    self.origin = origin
    self.result = result
    self.i_billing_plan = i_billing_plan
    self.i_call = i_call
    self.remote_ip = remote_ip
    self.cld = cld
    self.cli_orig = cli_orig
    self.cld_orig = cld_orig
    self.setup_ts = setup_ts
    self.user_agent = user_agent
    self.i_protocol = i_protocol
    self.translation_cost = translation_cost
    self.dcg = dcg
    self.is_late_dcg = is_late_dcg
    self.billing_plan_suspended = billing_plan_suspended
    self.lrn_cld_in = lrn_cld_in
    self.lrn_cld = lrn_cld
    self.round_up = round_up
    self.p_asserted_id = p_asserted_id
    self.buying_dcg = buying_dcg
    self.remote_party_id = remote_party_id
    self.sdp_list = sdp_list
    self.customer_dcgs = customer_dcgs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.i_account = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.duration = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.delay = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.pdd1xx = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.connected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.account_billables = AccountBillables()
          self.account_billables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.accessibility_billables = Billables()
          self.accessibility_billables.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.customer_billables = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = CustomerBillables()
            _elem70.read(iprot)
            self.customer_billables.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.rtime = MonoTime()
          self.rtime.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.origin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.i_billing_plan = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.i_call = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.remote_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.cld = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.cli_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.cld_orig = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.setup_ts = MonoTime()
          self.setup_ts.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.user_agent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I16:
          self.i_protocol = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.translation_cost = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.dcg = DidBillables()
          self.dcg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.BOOL:
          self.is_late_dcg = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.BOOL:
          self.billing_plan_suspended = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRUCT:
          self.lrn_cld_in = NullString()
          self.lrn_cld_in.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.lrn_cld = NullString()
          self.lrn_cld.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.BOOL:
          self.round_up = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRUCT:
          self.p_asserted_id = NullString()
          self.p_asserted_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRUCT:
          self.buying_dcg = BuyingDidBillables()
          self.buying_dcg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.remote_party_id = NullString()
          self.remote_party_id.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.LIST:
          self.sdp_list = []
          (_etype74, _size71) = iprot.readListBegin()
          for _i75 in xrange(_size71):
            _elem76 = CallsSdp()
            _elem76.read(iprot)
            self.sdp_list.append(_elem76)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.LIST:
          self.customer_dcgs = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = CustomerDidBillables()
            _elem82.read(iprot)
            self.customer_dcgs.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('write_cdr_args')
    if self.i_account is not None:
      oprot.writeFieldBegin('i_account', TType.I64, 1)
      oprot.writeI64(self.i_account)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.DOUBLE, 2)
      oprot.writeDouble(self.duration)
      oprot.writeFieldEnd()
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.DOUBLE, 3)
      oprot.writeDouble(self.delay)
      oprot.writeFieldEnd()
    if self.pdd1xx is not None:
      oprot.writeFieldBegin('pdd1xx', TType.DOUBLE, 4)
      oprot.writeDouble(self.pdd1xx)
      oprot.writeFieldEnd()
    if self.connected is not None:
      oprot.writeFieldBegin('connected', TType.BOOL, 5)
      oprot.writeBool(self.connected)
      oprot.writeFieldEnd()
    if self.account_billables is not None:
      oprot.writeFieldBegin('account_billables', TType.STRUCT, 6)
      self.account_billables.write(oprot)
      oprot.writeFieldEnd()
    if self.accessibility_billables is not None:
      oprot.writeFieldBegin('accessibility_billables', TType.STRUCT, 7)
      self.accessibility_billables.write(oprot)
      oprot.writeFieldEnd()
    if self.customer_billables is not None:
      oprot.writeFieldBegin('customer_billables', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.customer_billables))
      for iter83 in self.customer_billables:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rtime is not None:
      oprot.writeFieldBegin('rtime', TType.STRUCT, 9)
      self.rtime.write(oprot)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRING, 10)
      oprot.writeString(self.origin)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 11)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.i_billing_plan is not None:
      oprot.writeFieldBegin('i_billing_plan', TType.I64, 12)
      oprot.writeI64(self.i_billing_plan)
      oprot.writeFieldEnd()
    if self.i_call is not None:
      oprot.writeFieldBegin('i_call', TType.I64, 13)
      oprot.writeI64(self.i_call)
      oprot.writeFieldEnd()
    if self.remote_ip is not None:
      oprot.writeFieldBegin('remote_ip', TType.STRING, 14)
      oprot.writeString(self.remote_ip)
      oprot.writeFieldEnd()
    if self.cld is not None:
      oprot.writeFieldBegin('cld', TType.STRING, 15)
      oprot.writeString(self.cld)
      oprot.writeFieldEnd()
    if self.cli_orig is not None:
      oprot.writeFieldBegin('cli_orig', TType.STRING, 16)
      oprot.writeString(self.cli_orig)
      oprot.writeFieldEnd()
    if self.cld_orig is not None:
      oprot.writeFieldBegin('cld_orig', TType.STRING, 17)
      oprot.writeString(self.cld_orig)
      oprot.writeFieldEnd()
    if self.setup_ts is not None:
      oprot.writeFieldBegin('setup_ts', TType.STRUCT, 18)
      self.setup_ts.write(oprot)
      oprot.writeFieldEnd()
    if self.user_agent is not None:
      oprot.writeFieldBegin('user_agent', TType.STRING, 19)
      oprot.writeString(self.user_agent)
      oprot.writeFieldEnd()
    if self.i_protocol is not None:
      oprot.writeFieldBegin('i_protocol', TType.I16, 20)
      oprot.writeI16(self.i_protocol)
      oprot.writeFieldEnd()
    if self.translation_cost is not None:
      oprot.writeFieldBegin('translation_cost', TType.DOUBLE, 21)
      oprot.writeDouble(self.translation_cost)
      oprot.writeFieldEnd()
    if self.dcg is not None:
      oprot.writeFieldBegin('dcg', TType.STRUCT, 22)
      self.dcg.write(oprot)
      oprot.writeFieldEnd()
    if self.is_late_dcg is not None:
      oprot.writeFieldBegin('is_late_dcg', TType.BOOL, 23)
      oprot.writeBool(self.is_late_dcg)
      oprot.writeFieldEnd()
    if self.billing_plan_suspended is not None:
      oprot.writeFieldBegin('billing_plan_suspended', TType.BOOL, 24)
      oprot.writeBool(self.billing_plan_suspended)
      oprot.writeFieldEnd()
    if self.lrn_cld_in is not None:
      oprot.writeFieldBegin('lrn_cld_in', TType.STRUCT, 25)
      self.lrn_cld_in.write(oprot)
      oprot.writeFieldEnd()
    if self.lrn_cld is not None:
      oprot.writeFieldBegin('lrn_cld', TType.STRUCT, 26)
      self.lrn_cld.write(oprot)
      oprot.writeFieldEnd()
    if self.round_up is not None:
      oprot.writeFieldBegin('round_up', TType.BOOL, 27)
      oprot.writeBool(self.round_up)
      oprot.writeFieldEnd()
    if self.p_asserted_id is not None:
      oprot.writeFieldBegin('p_asserted_id', TType.STRUCT, 28)
      self.p_asserted_id.write(oprot)
      oprot.writeFieldEnd()
    if self.buying_dcg is not None:
      oprot.writeFieldBegin('buying_dcg', TType.STRUCT, 29)
      self.buying_dcg.write(oprot)
      oprot.writeFieldEnd()
    if self.remote_party_id is not None:
      oprot.writeFieldBegin('remote_party_id', TType.STRUCT, 30)
      self.remote_party_id.write(oprot)
      oprot.writeFieldEnd()
    if self.sdp_list is not None:
      oprot.writeFieldBegin('sdp_list', TType.LIST, 31)
      oprot.writeListBegin(TType.STRUCT, len(self.sdp_list))
      for iter84 in self.sdp_list:
        iter84.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.customer_dcgs is not None:
      oprot.writeFieldBegin('customer_dcgs', TType.LIST, 32)
      oprot.writeListBegin(TType.STRUCT, len(self.customer_dcgs))
      for iter85 in self.customer_dcgs:
        iter85.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sess_ended_args(object):
  """
  Attributes:
   - b2bua_id
   - sess_id
   - customer_billables
   - duration
   - delay
   - pdd1xx
   - connected
   - rtime
   - origin
   - result
   - lrn_cld_in
   - lrn_cld
   - buying_dcg
   - sdp_list
   - customer_dcgs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'b2bua_id', None, None, ), # 1
    (2, TType.STRING, 'sess_id', None, None, ), # 2
    (3, TType.LIST, 'customer_billables', (TType.STRUCT,(CustomerBillables, CustomerBillables.thrift_spec)), None, ), # 3
    (4, TType.DOUBLE, 'duration', None, None, ), # 4
    (5, TType.DOUBLE, 'delay', None, None, ), # 5
    (6, TType.DOUBLE, 'pdd1xx', None, None, ), # 6
    (7, TType.BOOL, 'connected', None, None, ), # 7
    (8, TType.STRUCT, 'rtime', (MonoTime, MonoTime.thrift_spec), None, ), # 8
    (9, TType.STRING, 'origin', None, None, ), # 9
    (10, TType.I32, 'result', None, None, ), # 10
    (11, TType.STRUCT, 'lrn_cld_in', (NullString, NullString.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'lrn_cld', (NullString, NullString.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'buying_dcg', (BuyingDidBillables, BuyingDidBillables.thrift_spec), None, ), # 13
    (14, TType.LIST, 'sdp_list', (TType.STRUCT,(CallsSdp, CallsSdp.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'customer_dcgs', (TType.STRUCT,(CustomerDidBillables, CustomerDidBillables.thrift_spec)), None, ), # 15
  )

  def __init__(self, b2bua_id=None, sess_id=None, customer_billables=None, duration=None, delay=None, pdd1xx=None, connected=None, rtime=None, origin=None, result=None, lrn_cld_in=None, lrn_cld=None, buying_dcg=None, sdp_list=None, customer_dcgs=None,):
    self.b2bua_id = b2bua_id
    self.sess_id = sess_id
    self.customer_billables = customer_billables
    self.duration = duration
    self.delay = delay
    self.pdd1xx = pdd1xx
    self.connected = connected
    self.rtime = rtime
    self.origin = origin
    self.result = result
    self.lrn_cld_in = lrn_cld_in
    self.lrn_cld = lrn_cld
    self.buying_dcg = buying_dcg
    self.sdp_list = sdp_list
    self.customer_dcgs = customer_dcgs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.b2bua_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sess_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.customer_billables = []
          (_etype89, _size86) = iprot.readListBegin()
          for _i90 in xrange(_size86):
            _elem91 = CustomerBillables()
            _elem91.read(iprot)
            self.customer_billables.append(_elem91)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.duration = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.delay = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.pdd1xx = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.connected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.rtime = MonoTime()
          self.rtime.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.origin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.lrn_cld_in = NullString()
          self.lrn_cld_in.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.lrn_cld = NullString()
          self.lrn_cld.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.buying_dcg = BuyingDidBillables()
          self.buying_dcg.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.sdp_list = []
          (_etype95, _size92) = iprot.readListBegin()
          for _i96 in xrange(_size92):
            _elem97 = CallsSdp()
            _elem97.read(iprot)
            self.sdp_list.append(_elem97)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.customer_dcgs = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = CustomerDidBillables()
            _elem103.read(iprot)
            self.customer_dcgs.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sess_ended_args')
    if self.b2bua_id is not None:
      oprot.writeFieldBegin('b2bua_id', TType.STRING, 1)
      oprot.writeString(self.b2bua_id)
      oprot.writeFieldEnd()
    if self.sess_id is not None:
      oprot.writeFieldBegin('sess_id', TType.STRING, 2)
      oprot.writeString(self.sess_id)
      oprot.writeFieldEnd()
    if self.customer_billables is not None:
      oprot.writeFieldBegin('customer_billables', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.customer_billables))
      for iter104 in self.customer_billables:
        iter104.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.DOUBLE, 4)
      oprot.writeDouble(self.duration)
      oprot.writeFieldEnd()
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.DOUBLE, 5)
      oprot.writeDouble(self.delay)
      oprot.writeFieldEnd()
    if self.pdd1xx is not None:
      oprot.writeFieldBegin('pdd1xx', TType.DOUBLE, 6)
      oprot.writeDouble(self.pdd1xx)
      oprot.writeFieldEnd()
    if self.connected is not None:
      oprot.writeFieldBegin('connected', TType.BOOL, 7)
      oprot.writeBool(self.connected)
      oprot.writeFieldEnd()
    if self.rtime is not None:
      oprot.writeFieldBegin('rtime', TType.STRUCT, 8)
      self.rtime.write(oprot)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRING, 9)
      oprot.writeString(self.origin)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 10)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.lrn_cld_in is not None:
      oprot.writeFieldBegin('lrn_cld_in', TType.STRUCT, 11)
      self.lrn_cld_in.write(oprot)
      oprot.writeFieldEnd()
    if self.lrn_cld is not None:
      oprot.writeFieldBegin('lrn_cld', TType.STRUCT, 12)
      self.lrn_cld.write(oprot)
      oprot.writeFieldEnd()
    if self.buying_dcg is not None:
      oprot.writeFieldBegin('buying_dcg', TType.STRUCT, 13)
      self.buying_dcg.write(oprot)
      oprot.writeFieldEnd()
    if self.sdp_list is not None:
      oprot.writeFieldBegin('sdp_list', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.sdp_list))
      for iter105 in self.sdp_list:
        iter105.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.customer_dcgs is not None:
      oprot.writeFieldBegin('customer_dcgs', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.customer_dcgs))
      for iter106 in self.customer_dcgs:
        iter106.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sess_ended_result(object):
  """
  Attributes:
   - try_backup_error
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'try_backup_error', (TryBackupError, TryBackupError.thrift_spec), None, ), # 1
  )

  def __init__(self, try_backup_error=None,):
    self.try_backup_error = try_backup_error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.try_backup_error = TryBackupError()
          self.try_backup_error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sess_ended_result')
    if self.try_backup_error is not None:
      oprot.writeFieldBegin('try_backup_error', TType.STRUCT, 1)
      self.try_backup_error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
