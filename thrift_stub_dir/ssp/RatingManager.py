#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def lookupbparam(self, clds, is_onnet, i_tariff, i_billing_plan):
    """
    Parameters:
     - clds
     - is_onnet
     - i_tariff
     - i_billing_plan
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def lookupbparam(self, clds, is_onnet, i_tariff, i_billing_plan):
    """
    Parameters:
     - clds
     - is_onnet
     - i_tariff
     - i_billing_plan
    """
    self.send_lookupbparam(clds, is_onnet, i_tariff, i_billing_plan)
    return self.recv_lookupbparam()

  def send_lookupbparam(self, clds, is_onnet, i_tariff, i_billing_plan):
    self._oprot.writeMessageBegin('lookupbparam', TMessageType.CALL, self._seqid)
    args = lookupbparam_args()
    args.clds = clds
    args.is_onnet = is_onnet
    args.i_tariff = i_tariff
    args.i_billing_plan = i_billing_plan
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_lookupbparam(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = lookupbparam_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "lookupbparam failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["lookupbparam"] = Processor.process_lookupbparam

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_lookupbparam(self, seqid, iprot, oprot):
    args = lookupbparam_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = lookupbparam_result()
    result.success = self._handler.lookupbparam(args.clds, args.is_onnet, args.i_tariff, args.i_billing_plan)
    oprot.writeMessageBegin("lookupbparam", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class lookupbparam_args(object):
  """
  Attributes:
   - clds
   - is_onnet
   - i_tariff
   - i_billing_plan
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'clds', (TType.LIST,(TType.STRING,None)), None, ), # 1
    (2, TType.BOOL, 'is_onnet', None, None, ), # 2
    (3, TType.I64, 'i_tariff', None, None, ), # 3
    (4, TType.STRUCT, 'i_billing_plan', (NullInt64, NullInt64.thrift_spec), None, ), # 4
  )

  def __init__(self, clds=None, is_onnet=None, i_tariff=None, i_billing_plan=None,):
    self.clds = clds
    self.is_onnet = is_onnet
    self.i_tariff = i_tariff
    self.i_billing_plan = i_billing_plan

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.clds = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = []
            (_etype37, _size34) = iprot.readListBegin()
            for _i38 in xrange(_size34):
              _elem39 = iprot.readString();
              _elem33.append(_elem39)
            iprot.readListEnd()
            self.clds.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_onnet = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.i_tariff = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.i_billing_plan = NullInt64()
          self.i_billing_plan.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('lookupbparam_args')
    if self.clds is not None:
      oprot.writeFieldBegin('clds', TType.LIST, 1)
      oprot.writeListBegin(TType.LIST, len(self.clds))
      for iter40 in self.clds:
        oprot.writeListBegin(TType.STRING, len(iter40))
        for iter41 in iter40:
          oprot.writeString(iter41)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_onnet is not None:
      oprot.writeFieldBegin('is_onnet', TType.BOOL, 2)
      oprot.writeBool(self.is_onnet)
      oprot.writeFieldEnd()
    if self.i_tariff is not None:
      oprot.writeFieldBegin('i_tariff', TType.I64, 3)
      oprot.writeI64(self.i_tariff)
      oprot.writeFieldEnd()
    if self.i_billing_plan is not None:
      oprot.writeFieldBegin('i_billing_plan', TType.STRUCT, 4)
      self.i_billing_plan.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class lookupbparam_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (LookupbparamResult, LookupbparamResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = LookupbparamResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('lookupbparam_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
