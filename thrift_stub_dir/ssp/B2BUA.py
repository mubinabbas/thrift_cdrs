#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def crtime_adj(self, i_environment, sess_id, credit_times):
    """
    Parameters:
     - i_environment
     - sess_id
     - credit_times
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def crtime_adj(self, i_environment, sess_id, credit_times):
    """
    Parameters:
     - i_environment
     - sess_id
     - credit_times
    """
    self.send_crtime_adj(i_environment, sess_id, credit_times)

  def send_crtime_adj(self, i_environment, sess_id, credit_times):
    self._oprot.writeMessageBegin('crtime_adj', TMessageType.CALL, self._seqid)
    args = crtime_adj_args()
    args.i_environment = i_environment
    args.sess_id = sess_id
    args.credit_times = credit_times
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["crtime_adj"] = Processor.process_crtime_adj

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_crtime_adj(self, seqid, iprot, oprot):
    args = crtime_adj_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.crtime_adj(args.i_environment, args.sess_id, args.credit_times)
    return


# HELPER FUNCTIONS AND STRUCTURES

class crtime_adj_args(object):
  """
  Attributes:
   - i_environment
   - sess_id
   - credit_times
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'i_environment', None, None, ), # 1
    (2, TType.STRING, 'sess_id', None, None, ), # 2
    (3, TType.STRUCT, 'credit_times', (CreditTimes, CreditTimes.thrift_spec), None, ), # 3
  )

  def __init__(self, i_environment=None, sess_id=None, credit_times=None,):
    self.i_environment = i_environment
    self.sess_id = sess_id
    self.credit_times = credit_times

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.i_environment = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sess_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.credit_times = CreditTimes()
          self.credit_times.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('crtime_adj_args')
    if self.i_environment is not None:
      oprot.writeFieldBegin('i_environment', TType.I64, 1)
      oprot.writeI64(self.i_environment)
      oprot.writeFieldEnd()
    if self.sess_id is not None:
      oprot.writeFieldBegin('sess_id', TType.STRING, 2)
      oprot.writeString(self.sess_id)
      oprot.writeFieldEnd()
    if self.credit_times is not None:
      oprot.writeFieldBegin('credit_times', TType.STRUCT, 3)
      self.credit_times.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
